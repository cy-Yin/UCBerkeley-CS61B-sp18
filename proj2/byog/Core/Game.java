package byog.Core;

import byog.TileEngine.TERenderer;
import byog.TileEngine.TETile;
import edu.princeton.cs.introcs.StdDraw;

import java.awt.Color;
import java.awt.Font;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;

public class Game {
    TERenderer ter = new TERenderer();
    /* Feel free to change the width and height. */
    public static final int WIDTH = 80;
    public static final int HEIGHT = 30;

    /**
     * Method used for playing a fresh game. The game should start from the main menu.
     */
    public void playWithKeyboard() {
        Menu initialMenu = new Menu(WIDTH, HEIGHT);
        initialMenu.generateMenu();
        while (true) {
            if (StdDraw.hasNextKeyTyped()) {
                char received = StdDraw.nextKeyTyped();
                if (received == 'N' || received == 'n') {
                    newGame();
                } else if (received == 'L' || received == 'l') {
                    SavedInfo savedInfo = loadGame();

                    TETile[][] world = savedInfo.world;
                    MapGenerationParameters mgp = savedInfo.mgp;
                    Player player1 = savedInfo.player1;
                    LockedDoor lockedDoor = savedInfo.lockedDoor;

                    startPlayInteractively(world, mgp, player1, lockedDoor);
                } else if (received == 'Q' || received == 'q') {
                    System.exit(0);
                }
            }
        }
    }

    /** Creates a new game if the user pressed "N" or "n".
     *  Called if playing with keyboard.
     */
    private static void newGame() {
        Menu seedMenu = new Menu(WIDTH, HEIGHT);
        long seed = seedMenu.generateSeedMenu();

        // initialize the tile rendering engine with a window of size WIDTH x HEIGHT
        MapGenerationParameters mgp = new MapGenerationParameters(WIDTH, HEIGHT, seed);

        TETile[][] world = MapGenerator.generateMap(mgp);
        // adds player and locked door to the world map
        Player player1 = MapGenerator.generatePlayer(world, mgp);
        LockedDoor lockedDoor = MapGenerator.generateLockedDoor(world, player1);

        startPlayInteractively(world, mgp, player1, lockedDoor);
    }

    private static void saveGame(TETile[][] finalWorldFrame, MapGenerationParameters mgp,
                                 Player player1, LockedDoor lockedDoor) {
        File f = new File("./saveWorld.txt");
        try {
            if (!f.exists()) {
                f.createNewFile();
            }
            FileOutputStream fs = new FileOutputStream(f);
            ObjectOutputStream out = new ObjectOutputStream(fs);
            out.writeObject(finalWorldFrame);
            out.writeObject(mgp);
            out.writeObject(player1);
            out.writeObject(lockedDoor);
            out.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    /** loads the saved game if the user pressed "L" or "l".
     *  Called if playing with keyboard.
     */
    private static SavedInfo loadGame() {
        try {
            ObjectInputStream in = new ObjectInputStream(new FileInputStream("./saveWorld.txt"));
            TETile[][] world = (TETile[][]) in.readObject();
            MapGenerationParameters mgp = (MapGenerationParameters) in.readObject();
            Player player1 = (Player) in.readObject();
            LockedDoor lockedDoor = (LockedDoor) in.readObject();
            in.close();

            SavedInfo savedInfo = new SavedInfo(world, mgp, player1, lockedDoor);
            return savedInfo;
        } catch (IOException | ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
    }

    /** Start the world.
     *  Both a new world generated by the new input seed from the user
     *  and just loading the previous game world are supported.
     */
    private static void startPlayInteractively(TETile[][] world, MapGenerationParameters mgp,
                                               Player player1, LockedDoor lockedDoor) {
        TERenderer ter = new TERenderer();
        ter.initialize(mgp.width, mgp.height);
        ter.renderFrame(world);

        boolean gameOver = false;
        boolean suspectSaveAndQuit = false;
        while (!gameOver) {
            if (StdDraw.hasNextKeyTyped()) {
                char receivedKey = StdDraw.nextKeyTyped();

                world = player1.move(world, Character.toString(receivedKey));
                ter.renderFrame(world);

                if (player1.pos.x == lockedDoor.pos.x && player1.pos.y == lockedDoor.pos.y) {
                    gameOver = true;

                    StdDraw.clear();
                    StdDraw.clear(Color.black);
                    Font gameOverFont = new Font("Monaco", Font.BOLD, 30);
                    StdDraw.setFont(gameOverFont);
                    StdDraw.setPenColor(Color.white);
                    int midWidth = WIDTH / 2;
                    int midHeight = HEIGHT / 2;
                    StdDraw.text(midWidth, midHeight,
                            "Game Over! You have unlock the door and escape successfully");
                    StdDraw.show();
                }

                /* if the User press ":q" or ":Q", save the game and exit. */
                if (receivedKey == ':') {
                    suspectSaveAndQuit = true;
                }
                if ((receivedKey == 'Q' || receivedKey == 'q') && suspectSaveAndQuit) {
                    saveGame(world, mgp, player1, lockedDoor);
                    System.exit(0);
                }
            }
        }
    }

    /**
     * Method used for autograding and testing the game code. The input string will be a series
     * of characters (for example, "n123sswwdasdassadwas", "n123sss:q", "lwww". The game should
     * behave exactly as if the user typed these characters into the game after playing
     * playWithKeyboard. If the string ends in ":q", the same world should be returned as if the
     * string did not end with q. For example "n123sss" and "n123sss:q" should return the same
     * world. However, the behavior is slightly different. After playing with "n123sss:q", the game
     * should save, and thus if we then called playWithInputString with the string "l", we'd expect
     * to get the exact same world back again, since this corresponds to loading the saved game.
     * @param input the input string to feed to your program
     * @return the 2D TETile[][] representing the state of the world
     */
    public TETile[][] playWithInputString(String input) {
        // Hint: Fill out this method to run the game using the input passed in,
        // and return a 2D tile representation of the world that would have been
        // drawn if the same inputs had been given to playWithKeyboard().

        TETile[][] finalWorld = new TETile[WIDTH][HEIGHT];

        input = input.toLowerCase();
        char firstOperation = input.charAt(0); // 'n' for new or 'l' for load or 's' for save.
        if (firstOperation == 'n') {
            finalWorld = newGame(input);
        } else if (firstOperation == 'l') {
            SavedInfo savedInfo = loadGame();

            finalWorld = savedInfo.world;
            MapGenerationParameters mgp = savedInfo.mgp;
            Player player1 = savedInfo.player1;
            LockedDoor lockedDoor = savedInfo.lockedDoor;

            int indexL = input.indexOf('l');
            String inputString = input.substring(indexL + 1);
            controlWithInput(finalWorld, mgp, player1, lockedDoor, inputString);
        } else if (firstOperation == 'q') {
            System.exit(0);
        } else {
            finalWorld = newGame(input);
        }

        return finalWorld;
    }

    /** Creates a new game when char n which means demanding for a new game is given.
     * Called if playing with input string.
     */
    private static TETile[][] newGame(String input) {
        long seed = getSeed(input);

        MapGenerationParameters mgp = new MapGenerationParameters(WIDTH, HEIGHT, seed);
        TETile[][] world = MapGenerator.generateMap(mgp);
        Player player1 = MapGenerator.generatePlayer(world, mgp);
        LockedDoor lockedDoor = MapGenerator.generateLockedDoor(world, player1);

        int indexS = input.indexOf('s');
        String inputString = input.substring(indexS + 1);
        controlWithInput(world, mgp, player1, lockedDoor, inputString);

        return world;
    }

    /** Returns the long type seed from the input string.
     *  Called if playing with input string.
     *  @param input the input string
     */
    private static long getSeed(String input) {
        /* input string have a format of "N#####S"
         * where "######" are digits for example "1234"
         * we need to convert to digits-string to a long type seed.
         */
        int indexS = input.indexOf('s');
        long seed = Long.parseLong(input.substring(1, indexS)); // seed string start from 2 to n-1
        return seed;
    }

    /** Controls the game with the input string.
     *  Called if playing with input string.
     *  @param world the world map
     *  @param player1 the player
     *  @param lockedDoor the locked door
     *  @param input the input string
     */
    private static void controlWithInput(TETile[][] world, MapGenerationParameters mgp,
                                         Player player1, LockedDoor lockedDoor, String input) {
        boolean gameOver = false;
        int i = 0;
        while (!gameOver && i < input.length()) {
            char receivedKey = input.charAt(i);

            world = player1.move(world, Character.toString(receivedKey));

            if (player1.pos.x == lockedDoor.pos.x && player1.pos.y == lockedDoor.pos.y) {
                gameOver = true;
            }

            /* if the User press ":q" or ":Q", save the game and exit. */
            if (input.charAt(i) == ':') {
                if (i + 1 < input.length()
                        && (input.charAt(i + 1) == 'q' || input.charAt(i + 1) == 'Q')) {
                    saveGame(world, mgp, player1, lockedDoor);
                    break;
                }
            }

            i = i + 1;
        }
    }
}
